Chapter 14 Timing Framework: Fundamentals - Core Concepts

<<Filthy Rich Clients: Developing Animated and Graphical Effects for Desktop Java? Applications>>pdf

Timing Framework Animator 设计方案 hxzon

------------------------------------------------

Core Concepts

Several key concepts and properties are embedded in the central classes used by
the Timing Framework:

•Animator : This class encapsulates most of the functionality discussed in
this chapter, but it is worth discussing it separately so that we can see how
an Animator, and the animation it deﬁnes, is created and run.

• Callbacks: An application must have a means to be notiﬁed of events dur-
ing the animation. In this way, an application can be involved in the ani-
mation to perform appropriate actions based on the state of the animation.
Event notiﬁcation is handled through callbacks to an interface that appli-
cation code may implement. This mechanism is similar to what we saw
earlier in our discussion of the built-in Java timers, except that the Timing
Framework has more callbacks with more information to enable more ﬂex-
ibility in your animations.

• Duration: The duration value deﬁnes the length of time that the animation
will last. An animation stops automatically when this duration has elapsed.
You may also specify that an animation should run indeﬁnitely.

• Repetition: Some animations are intended to run once and then ﬁnish. Oth-
ers may run indeﬁnitely. Still others may run with a ﬁnite duration and then
repeat when they are done.

• Resolution: The resolution of an animation controls the frame rate of the
animation. This concept was discussed at length in Chapter 12, “Anima-
tion Fundamentals.”

• Starting behavior: An animation may not want to start with the default
behavior of moving forward from the beginning. It may instead want to run
backwards or start from some other point than the beginning. It may also
want to delay for some time before starting.

• Ending behavior: By default, an animation holds its ﬁnal value when it is
stopped. You might choose, instead, to have an animation reset to the start
state when ﬁnished.

• Interpolation: The easiest kind of interpolation is linear interpolation,
which we discussed in earlier chapters. But there are other kinds of inter-
polation that we can apply to give the animation nonlinear behavior.

Animator

Animator is the core class of the entire framework. Users of the Timing
Framework create Animators with information that details the animations they
want to run. The properties that deﬁne an animation are set through a combina-
tion of the constructors, which enable setting the most common properties, and
other methods in the class. Animations are started and stopped by calling
methods in this class. Finally, this class is responsible for issuing ongoing ani-
mation events while the animation is running, which is discussed in the next
section, “Callbacks.”

Creation

Animators are created through one of the three constructor methods:
Animator(int duration)
This method takes only a duration parameter, discussed later, which controls how
long the animation will run. Note that this constructor takes no TimingTarget
parameter. Callers would typically add one or more TimingTarget objects
later via the addTarget() method; otherwise the Animator will run but will
issue no events.
2
Animator(int duration, TimingTarget target)
This variant, the most common, takes a duration and a TimingTarget. The
TimingTarget, discussed in the section “Callbacks,” contains the methods
that will be called with animation events as the animation runs.
Animator(int duration, double repeatCount, 
         Animator.RepeatBehavior repeatBehavior,
         TimingTarget target)
This ﬁnal variant takes the same duration and target parameters as before, but
also takes two other parameters that control how the animation is repeated
over time, as discussed in the section “Repetition.”

Control Flow

There are several methods that control the running and stopping of the anima-
tion. Note that, as discussed in the section “Duration,” animations may stop
automatically. But animations may also be programmatically halted by some of
the methods of Animator described here.

void start()
This method starts the animation, which results in callbacks to the TimingTarget
begin() and timingEvent() methods, as described in the section “Callbacks.”

void stop()
This method stops the animation, which results in a call to the end() method
of TimingTarget, notifying any targets that the animation has completed.

void cancel()
This method is like stop() except that TimingTarget.end() will not be
called for any targets. It’s like pulling the plug on the animation instead of let-
ting it stop normally.

void pause()
This method pauses a running animation, which stops the animation in its cur-
rent state until and unless a later call to resume() is issued.

void resume()
This method resumes an animation that has been paused. The animation will
continue from its previously paused state, as if no time had passed between
pause() and resume(). This method has no effect on an animation that has
not been paused.

boolean isRunning()
This method queries whether the animation is currently running.

Controlling a Running Animation

It is worth noting that most of the parameters that control an animation, such as
the duration and repetition parameters, make sense only on a non-running ani-
mation. Once an animation is running, it is not clear how changes to these
parameters should be interpreted. Therefore, most of the methods of Animator
that set these parameters, except where noted, will throw an exception if called
while an animation is running.

Callbacks

TimingTarget

Animations in the Timing Framework run by having the animation code in
Animator call back into one or more TimingTarget implementations. A
TimingTarget object exists to receive timing events from an Animator. The
TimingTarget object is the connection between the animation running through
Animator and the animation actually doing something. The callback methods in
TimingTarget are given information about the current animation state and can
set up object state, calculate new property values, or do anything else appropriate
for the situation.
When you set up an Animator, you give it one or more TimingTarget objects
through one of the constructors for Animator and through the addTarget()
method of Animator. As the animation runs, the Animator object calls the meth-
ods in each of its TimingTarget objects.
The TimingTarget interface has four different event methods to implement:
public interface TimingTarget {
public void begin();
public void end();
public void repeat();
public void timingEvent(float fraction);
}

void begin()
This method is called by Animator when the animation is ﬁrst started. It
allows the timing target to perform any necessary setup prior to running the
animation.

void end()
This method is called when the animation is ﬁnished, either because the anima-
tion completed naturally by running for the speciﬁed duration and number of
repetitions or because the stop() method was called on this target’s Animator.
This method allows the target to perform any necessary cleanup operations.
The end() method can be used as a mechanism to help sequence animations
together. For example, a target can use the end() call to signal that some other
dependent animation should start. Note, however, that triggers provide an even
easier mechanism for this functionality, as we see in Chapter 15.

void repeat()
This method is called during a repeating animation, every time the animation
begins another repetition. Repeating animations are discussed later.

void timingEvent(float fraction)
This method is the most important method in this interface and, in fact, in the
entire framework.
3 timingEvent() provides the target with the fraction, from
0 to 1, of the animation that has elapsed. The target can then use this informa-
tion to change whatever properties need to be changed during the animation
and to schedule a repaint if necessary.
The fraction value is directly related to the duration property. If Animator is
given a duration of 2 seconds, then an animation that issues a timingEvent()
one second after starting would call timingEvent() with a fraction value
of .5.
4
The fraction is a useful value to have. If you want to animate some variable
linearly between start and end values, it is important to know what fraction of
the animation has elapsed. If the animation is halfway through, then you know
to set your variable to halfway between its start and end values.
Some of the parameters of Animator, such as the start direction and the reversing
behavior, may make an animation run backwards. When this happens, the frac-
tion values received in timingEvent() run in reverse, too. That is, the fraction
always represents the elapsed fraction of the animation from the start to the end.
An animation running in reverse starts at the end point and runs in reverse. So,
for example, an animation that starts at the end and runs in reverse will issue val-
ues from 1 down to 0.

TimingTargetAdapter

The TimingTargetAdapter class is a simple implementation of TimingTarget,
providing empty methods for that interface. This class is provided as a utility for
subclasses that want to receive only speciﬁc Animator events and do not want to
implement all of the TimingTarget methods just to get the one or two that they
really care about.

Duration

The discussion of timingEvent() relates directly to the duration property,
because the fraction elapsed of an animation is calculated from the time elapsed
so far and the total duration of that animation. The duration is speciﬁed in either
one of Animator’s constructors, as seen previously, or in the following method:
setDuration(int duration)
Both the setDuration() method and Animator’sconstructors set the duration
for the animation in milliseconds. For example, an animation is assigned a dura-
tion of 2 seconds through a constructor, like this:
Animator myAnimation = new Animator(2000);
or through a later assignment to an existing animation:
myAnimation.setDuration(2000);
There is one additional, important value that a duration may have:
Animator.INFINITE, which tells Animator that this animation should run indef-
initely. Note that such animations will still call timingEvent() on a regular
basis, but the fraction value in that call will be meaningless because there can be
no elapsed percentage of an inﬁnite amount of time.
5
An important concept to note in relation to duration is that all animations are
tracked in Animator in fractional time. That is, an animation, regardless of
actual duration, may be thought of in terms of the percentage that the animation
has elapsed at any time. So any animation, other than one of INFINITE duration,
has a fractional duration of exactly 1. Calls to timingEvent() during the anima-
tion will use a fractional value instead of an actual duration. This mechanism
tends to be easier to deal with for callers, which get more useful information
from knowing that an animation is one-quarter elapsed than that it is 500 ms into
whatever its total duration may be. The concept of the elapsed fraction comes up
often. We typically discuss animations in terms of this fraction instead of the
total duration simply because that is what Animator keeps track of and reports to
its targets, and because it is much more powerful and useful to Animator’s users.

Repetition

A repeated animation is a common pattern. Repetition can take the form of run-
ning the same animation over and over, like an indeﬁnite progress bar whose sta-
tus always crawls from the left to the right. A repeating animation can also be
constantly reversing, like a pulsating button that has a glow effect in which the
glow is constantly glowing toward full intensity and then dimming back down to
some default state. Instead of constructing separate animations for each repeti-
tion or creating one large animation that handles all of the repetitions as an
implementation detail, the framework provides the ability to deﬁne the core ani-
mation and then parameters for how that animation should be repeated.
There are two properties of Animator that control repetition: the number of
times the animation should be repeated and the behavior upon each repetition.
These properties are controlled through the following constructor and methods:
Animator(int duration, double repeatCount,
         Animator.RepeatBehavior repeatBehavior, 
         TimingTarget target)
void setRepeatCount(double repeatCount)
void setRepeatBehavior(Animator.RepeatBehavior repeatBehavior)
In this constructor and these methods, the repetition behavior is controlled
through the repeatCount and repeatBehavior variables. repeatCount is sim-
ply the number of times that the animation should be repeated. This value can be
fractional, such as 2.5, to indicate that the animation may stop partway through.
repeatCount can also, like the duration value, take the value Animator.INFINITE,
which indicates that the animation should repeat indeﬁnitely. 
repeatBehavior can have a value of either RepeatBehavior.LOOP or
RepeatBehavior.REVERSE. LOOP repeats the animation in the same direction
every time. When the animation reaches the end, it starts over from the beginning.
So, for example, the animation fraction being passed into timingEvent() calls
will go from 0 to 1, then 0 to 1, and so on, until repeatCount is reached or the ani-
mation is otherwise stopped. REVERSE creates an animation that reverses direction
whenever it reaches the end of an animation. For example, the animation fraction
passed into timingEvent() calls will go from 0 to 1, 1 to 0, 0 to 1, and so on.

Resolution

The resolution of Animator controls the amount of time between each call to
timingEvent(). The default used by Animator is reasonable for most situations,
so developers should not need to change the value in general, but changing it is a
simple matter of calling setResolution():
void setResolution(int resolution)
This method sets the number of milliseconds between each call to timingEvent().
Recall from our discussion of resolution in Chapter 12, “Animation Fundamen-
tals,” that the actual resolution may be dependent on such factors as the internal
timing mechanism being used and the runtime platform. The Timing Framework
currently uses the Swing timer internally, and its resolution is thus constrained to
the resolution of that timer for now.
6

Start Behavior

There are three factors about the starting state of the animation that you can con-
trol: the start delay, the direction, and the initial fraction.

Start Delay
Some animations may wish to have an initial delay before commencing. The
amount of this delay is controlled through the setStartDelay() method:
void setStartDelay(int startDelay)
where the startDelay value is in terms of milliseconds.

Start Direction
By default, an animation runs forward when it starts. The initial direction can be
changed to run the animation in reverse instead. This setting is controlled
through the setStartDirection() method:
void setStartDirection(Animator.Direction startDirection)
where startDirection can have the value of either Direction.FORWARD, which
is the default behavior, or Direction.BACKWARD.

Start Fraction
By default, an animation begins at fraction 0. This setting can be changed to start
from any point during the animation by calling setStartFraction():
void setStartFraction(float startFraction)
where startFraction is a value from 0 to 1, representing the fraction elapsed of
the animation. Note that to run an animation from the end to the beginning, the
caller should set the initial fraction to 1 and the direction to BACKWARD. An exam-
ple of this behavior is shown in the FadingButtonTF demo later.

End Behavior

By default, an animation will hold its ﬁnal value when it ﬁnishes. For example,
an animation that ﬁnishes a normal forward cycle from 0 to 1 will hold the value
1 at the end. This can be changed to reset to 0 at the end instead by calling
setEndBehavior():
void setEndBehavior(Animator.EndBehavior endBehavior)
where endBehavior can have the value of either EndBehavior.HOLD, which is the
default behavior, or EndBehavior.RESET, which sends out a ﬁnal timingEvent()
with a fraction of 0 at the end of the animation.

Demo: FadingButton Reprise

We’re not quite done with the core Animator features. We still need to cover the
important area of Interpolator. But it’s time for a break to see some of the con-
cepts in action.
Let’s look at what we can do with just the classes that we have covered so far.
We have many classes in the framework yet to cover, but the power and ﬂexibil-
ity of just the basic Animator and TimingTarget classes provides enough to
enable simple code that drives powerful animations. In particular, think of the
things that we had to do with the built-in timers to animate our GUIs in previous
chapters or the things that seemed unapproachably tedious, like cyclic, repeating
animations.
For a simple example, let’s revisit the FadingButton demo that we discussed
Chapter 12. While the application is not terribly complex, it is a useful example
for showing how using Animator helps make animations easier to program.
Recall in that example that we deﬁned a custom JButton subclass with various
methods for rendering the button translucently and animating the value of alpha.
First, there were some instance variables to help track state:
float alpha = 1.0f;           // current opacity of button
Timer timer;                  // for later start/stop actions
int animationDuration = 2000; // animation will take 2 seconds
long animationStartTime;      // start time for each animation
In the constructor, we created the Timer object that ran the animation:
timer = new Timer(30, this);
Finally, we had an actionPerformed() method that served two purposes: It
caught clicks on the button and used them to start and stop the animation, and it
also received Timer events and animated the value of alpha with the following
code:
public void actionPerformed(ActionEvent ae) {
// ... code to handle button clicks not shown here ...
long currentTime = System.nanoTime() / 1000000;
long totalTime = currentTime - animationStartTime;
if (totalTime > animationDuration) {
    animationStartTime = currentTime;
}
float fraction = (float)totalTime / animationDuration;
fraction = Math.min(1.0f, fraction);
// This calculation will cause alpha to go from 1 to 0 
// and back to 1 as the fraction goes from 0 to 1
alpha = Math.abs(1 - (2 * fraction));
repaint();
}

Now that we have the power of Animator, let’s see how the code changes. You
can see and run the code for this version, called FadingButtonTF, on the book’s
Web site. First of all, we need fewer instance variables:
float alpha = 1.0f;           // current opacity of button
Animator animator;            // for later start/stop actions
int animationDuration = 2000; // each cycle takes 2 seconds
We do not need to track the animationStartTime because we no longer need to
calculate the fraction of the cycle elapsed. Animator does this for us.
The constructor is similar to what it was before, although the declaration for
Animator is a bit different from that of Timer:
animator = new Animator(animationDuration/2, Animator.INFINITE,
                        RepeatBehavior.REVERSE, this); 
There are a few interesting bits about this call. First of all, we are using a dura-
tion of only half of animationDuration. This difference is because of how this
new animation will be handled. Previously, each individual animation would
consist of both the fade-out and fade-in portions, which we wanted to last for 2
seconds. With Animator, we can declare a more interesting reversing animation
that reverses every second, which gives us the same result. Also, we see that we
are going to be repeating inﬁnitely, which is the same behavior as in the earlier
Timer example. We declare a REVERSE behavior so that the animation reverses
direction every time it repeats. And ﬁnally, we pass in this as the TimingTarget
that will be called with timing events. Our object implements the TimingTarget
interface in order to catch timingEvent() calls, just as the previous version of
the demo received events from Timer in its actionPerformed() method.
Additionally, since we want to start at an opaque value and animate toward
transparency, we need to make sure that we link up the animation fraction and
our alpha value correctly. Both values vary between 0 and 1 over the course of
the animation, so we’re almost there. But since our animation starts at 0 by
default and we want our alpha value to start at 1, or fully opaque, these values
are going to run opposite of each other. We can either have alpha represent the
inverse of the fraction, so that alpha would be 1 when fraction was at 0, or we
can use additional facilities in Animator to start the animation at the end, play-
ing backwards. This will ensure that the animation fraction starts at the same
value as we want for our alpha. We add the following code to set the Animator
properties accordingly:
animator.setStartFraction(1.0f);
animator.setStartDirection(Direction.BACKWARD);
Finally, let’s see the actual animation code for this new version of the demo. This
time, the code is in the timingEvent() method, which is the target for Animator’s
timing events, instead of the old actionPerformed() method. Compare the
code in actionPerformed() to this approach for timingEvent():
public void timingEvent(float fraction) {
alpha = fraction;
repaint();
}
Note that we do not need to calculate the fraction elapsed of the animation,
because it is given to us. Also, the ﬂexibility in how we deﬁned the animation,
starting at the end and running backwards in the ﬁrst animation, simpliﬁed our
alpha calculation to simply equal the fraction itself. A screenshot of the applica-
tion is seen in Figure 14-1.
Figure 14-1   FadingButtonTF: same as the FadingButton demo, but with less code.
This new version of the demo behaves exactly like the old one, but with less
code. The demo is, by design, very simple, so it does not really show off the
power of the Timing Framework as much as the simpler code that is possible,
even for very easy animations. But it would help for us to develop a more inter-
esting demo that shows off more about the framework. We develop this demo,
The Racetrack Demo, throughout this chapter and the next one so that you can
see how the different elements of the framework work together to create more
interesting and complex animations.